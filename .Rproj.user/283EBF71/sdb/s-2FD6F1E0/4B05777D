{
    "contents" : "# Basic settings for cyREST\nport.number = 1234\nbase.url = paste(\"http://localhost:\", toString(port.number), \"/v1\", sep=\"\")\n\n#\n# Returns edge attributes for member edges.\n#\ngetCommunityEdge <- function(g, community) {\n  num.edges <- ecount(g)\n  edge.community <- array(0, dim=c(num.edges))\n  edges <- get.edges(g, 1:num.edges)\n  comms <- array(community)\n  sources <- array(edges[,1])\n  targets <- array(edges[,2])\n  for(i in 1:num.edges) {\n    if(i %% 1000 == 0) {\n      print(i)\n    }\n    sidx <- sources[i]\n    tidx <- targets[i]\n    source <- comms[sidx]\n    target <- comms[tidx]\n    \n    if(source == target) {\n      edge.community[[i]] <- source\n    }\n  }\n  return(edge.community)\n}\n\ntoCytoscape <- function (igraphobj) {\n  # Extract graph attributes\n  graph_attr = graph.attributes(igraphobj)\n  \n  # Extract nodes\n  node_count = length(V(igraphobj))\n  if('name' %in% list.vertex.attributes(igraphobj)) {\n    V(igraphobj)$id <- V(igraphobj)$name\n  } else {\n    V(igraphobj)$id <- as.character(c(1:node_count))\n  }\n\n  nodes <- V(igraphobj)\n  v_attr = vertex.attributes(igraphobj)\n  v_names = list.vertex.attributes(igraphobj)\n  \n  nds <- array(0, dim=c(node_count))\n  for(i in 1:node_count) {\n    if(i %% 1000 == 0) {\n      print(i)\n    }\n    nds[[i]] = list(data = mapAttributes(v_names, v_attr, i))\n  }\n  \n  edges <- get.edgelist(igraphobj)\n  edge_count = ecount(igraphobj)\n  e_attr <- edge.attributes(igraphobj)\n  e_names = list.edge.attributes(igraphobj)\n  \n  attr_exists = FALSE\n  e_names_len = 0\n  if(identical(e_names, character(0)) == FALSE) {\n    attr_exists = TRUE\n    e_names_len = length(e_names)\n  }\n  e_names_len <- length(e_names)\n  \n  eds <- array(0, dim=c(edge_count))\n  for(i in 1:edge_count) {\n    st = list(source=toString(edges[i,1]), target=toString(edges[i,2]))\n    \n    # Extract attributes\n    if(attr_exists) {\n      eds[[i]] = list(data=c(st, mapAttributes(e_names, e_attr, i)))\n    } else {\n      eds[[i]] = list(data=st)\n    }\n    \n    if(i %% 1000 == 0) {\n      print(i)\n    }\n  }\n\n  el = list(nodes=nds, edges=eds)\n  \n  x <- list(data = graph_attr, elements = el)\n  print(\"Done.  To json Start...\")\n  return (toJSON(x))\n}\n\nmapAttributes <- function(attr.names, all.attr, i) {\n  attr = list()\n  cur.attr.names = attr.names\n  attr.names.length = length(attr.names)\n  \n  for(j in 1:attr.names.length) {\n    if(is.na(all.attr[[j]][i]) == FALSE) {\n#       attr[j] = all.attr[[j]][i]\n      attr <- c(attr, all.attr[[j]][i])\n    } else {\n      cur.attr.names <- cur.attr.names[cur.attr.names != attr.names[j]]\n    }\n  }\n  names(attr) = cur.attr.names\n  return (attr)\n}\n\n\nsend2cy <- function(cygraph, style.name, layout.name) {\n  network.url = paste(base.url, \"networks\", sep=\"/\")\n  res <- POST(url=network.url, body=cygraph, encode=\"json\")\n  network.suid = unname(fromJSON(rawToChar(res$content)))\n  print(network.suid)\n  \n  # Apply Visual Style\n  apply.layout.url = paste(base.url, \"apply/layouts\", layout.name, toString(network.suid), sep=\"/\")\n  apply.style.url = paste(base.url, \"apply/styles\", style.name, toString(network.suid), sep=\"/\")\n  \n  res <- GET(apply.layout.url)\n  res <- GET(apply.style.url)\n}\n",
    "created" : 1447754140381.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1183709907",
    "id" : "4B05777D",
    "lastKnownWriteTime" : 1447699762,
    "path" : "~/PhD/test/RGroup_Network/cytoscape_util.R",
    "project_path" : "cytoscape_util.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "type" : "r_source"
}