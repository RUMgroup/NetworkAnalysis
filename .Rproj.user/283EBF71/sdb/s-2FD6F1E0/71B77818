{
    "contents" : "#Network Analysis: Bridging R and Cytoscape\n\n#Aims\n#Introduce igraph for basic network constuction and analysis\n#Demonstrate the use of RCy3 and the REST API to visualise igraph networks in Cytoscape\n\n\n####Intro####\n#Why use networks?\n\n#Allow modelling of interactions between biological entities\n#Framework to intergrate information \n#-can add expression data onto a protein interaction network to find active pathways in disease\n#-if you know some causative disease genes can you infer others by network properties?\n\n\n#How do we do it in R?\n#- Plethora of packages on CRAN/Biocondctor for network analysis\n#igraph is popular and performs most basic graph functions, plus have many algorithms pre-implemented \n#also available for python\n\n\n###igraph#####\n\nlibrary(\"igraph\")\nlibrary(\"RCy3\")\nlibrary(\"gplots\")\n\n#First make an edge list\ng <- as.data.frame(matrix(c(1, 2, 1, 3, 1, 4, 3, 4, 2, 4),byrow = TRUE, ncol = 2))\n\n#make the graph\ng<-graph.data.frame(g,directed = F)\n\n#graph.adjacency() can be useful for input as well\n\n#inspect the graph object\ng\nsummary(g)\n\n#visualise - don't do for big networks!\nplot(g)\n\n#add a node \ng<-add.vertices(graph = g,nv = 1,name=5) #note we are returning the modified graph\n\n#add an edge from 1 to 5\ng<-add.edges(graph = g,edges = c(1,5,5,1))\n\nplot(g)\n\n#let's pipe 'cause we can\ng<-as.data.frame(matrix(c(1, 2, 1, 3, 1, 4, 3, 4, 2, 4),byrow = TRUE, ncol = 2)) %>%\n  graph.data.frame(directed = T) %>%\n  add.vertices(1,name=5) %>%\n  add.edges(c(1,5,5,1,4,3)) %>%\n  set_edge_attr(\"color\", value = \"red\")\n\nplot(g)\n\n#iterate over nodes and edges\nV(g)\nE(g)\n\n#Can create new vertice and edge attributes \nV(g)$size<-50\nV(g)$color<-\"blue\"\n\n#the plot function will interoret certain attributes by default\nplot(g)\n\n#can assign attribute values to indivdual nodes\nV(g)$color<-c(\"blue\",\"red\",\"orange\",\"purple\",\"green\")\nplot(g)\n\n#can do more advanced visualisation\nplot(g,mark.groups = list(c(1,5),c(2,3,4)))\n     \n#basic functions provide building blocks for advanced custom algorithms\n#i.e\nneighbors(g,v = 5,mode = \"all\")\n\n#best to avoid numbers as node names, things get confusing with index vs names for functions\n\n###### Sending graphs to cytoscape #####\n\n#Method 1: - pretty manual\n#need some function utilities - borrowed from idekar lab (https://github.com/idekerlab/cy-rest-R)\nsource(\"cytoscape_util.R\")\nsource(\"utils.R\")\n\n#convert graph to json\ng.json<-toCytoscape(g)\n\nnetwork.url = paste(base.url, \"networks\", sep=\"/\")\nres <- POST(url=network.url, body=g.json, encode=\"json\")\n\n# Extract network SUID from the return value\nnetwork.suid = unname(fromJSON(rawToChar(res$content)))\n\nstyle.simple <- buildStyleSimple(\"simple\", g.json, color = \"color\")\nstyle.url = paste(base.url, \"styles\", sep=\"/\")\nPOST(url=style.url, body=style.simple, encode = \"json\")\n\napply.style.url = paste(base.url, \"apply/styles/simple\", toString(network.suid), sep=\"/\")\nGET(apply.style.url)\n\nlayout.params = list(\n  name=\"unweighted\",\n  value=TRUE\n)\nlayout.params.url = paste(base.url, \"apply/layouts/kamada-kawai/parameters\", sep=\"/\")\nPUT(layout.params.url, body=toJSON(list(layout.params)), encode = \"json\")\n\n# Apply layout\nparams <- paste(toString(network.suid), \"?column=id\", sep=\"\")\napply.layout.url = paste(base.url, \"apply/layouts/kamada-kawai\", params, sep=\"/\")\nGET(apply.layout.url)\n                  \n\n##Method 2 - less manual\n\n#RCy3 only works with graphNEL objects so need to convert\n\ng.NEL<-igraph.to.graphNEL(g)\n\ng.NEL<-initNodeAttribute(g.NEL,\"color\",\"char\",\"black\")\ng.NEL<-initNodeAttribute(g.NEL,\"size\",\"numeric\",1)\ng.NEL<-initEdgeAttribute(g.NEL,\"color\",\"char\",\"black\")\ng.NEL<-initEdgeAttribute(g.NEL,\"weight\",\"char\",\"black\")\n\n\n\nnodeDataDefaults(g.NEL,\"label\")<-\"default\"\nnodeData(self = g.NEL,V(g)$name,\"label\")<-V(g)$name\ng.NEL<-initNodeAttribute(g.NEL,\"label\",\"char\",default.value = \"name\")\n\n#send graph to cytoscape\ng.Cyto<-CytoscapeWindow(title = \"example\",graph = g.NEL,overwriteWindow = T)\ndisplayGraph(g.Cyto)\n\n#set layout\nlayoutNetwork(g.Cyto,\"force-directed\")\n\n#set color\nsetNodeColorDirect(g.Cyto,V(g)$name,V(g)$color)\n\n#set node shape\nsetNodeShapeDirect(g.Cyto,V(g)$name,rep(\"triangle\",5))\n\n#The connection is two ways - can get info back from cytoscape\ngetSelectedNodes(g.Cyto)\n\n#could run an app in cytoscape then do extra stats in R\n\n\n\n#### Structural Network Analysis ####\n\n#Let's look at the yeast protein interaction network\n\n# Load yeast network SIF file as Data Frame\nyeast.table <- read.table(\"yeastHighQuality.sif\")\n\n# Convert it to simple edge list\nyeast.table.edgelist <- yeast.table[c(1,3)]\n\n# Convert data frame to undirected igraph object\ng.original <- graph.data.frame(yeast.table.edgelist, directed=F)\n\n# Extract componentes (individual connected subgraphs)\nsubgraphs <- decompose.graph(g.original)\n\n# Pick largest subgraph\nlargest.subgraph <- subgraphs[[which.max(sapply(subgraphs, vcount))]]\n\n# Remove duplicate edges\ng <- simplify(largest.subgraph, remove.multiple=T, remove.loops=T)\n\n\n# Global Network Statistics\ng$density <- graph.density(g) # Density\ng$transitivity <- transitivity(g) # Transitivity\n\n# Node statistics\nV(g)$closeness <- closeness(g) # Closeness Centrarity\nV(g)$degree <- igraph::degree(g) # Degree\nV(g)$pagerank <- page.rank(g, directed = FALSE)$vector # PageRank\nV(g)$betweenness <- betweenness(g) # Betweenness Centrarity\n\n# Edge statistics\nE(g)$betweenness.edge <- edge.betweenness(g) # Edge Betweenness\n\n#Community Detection: Try multiple algorithms\n\n#optimise objective function - modularity\ncommunities.greedy <- fastgreedy.community(g)\n\n#by eginvector of the modularity matrix\ncommunities.leading <- leading.eigenvector.community(g)\n\n#neighbour majority voting\ncommunities.label.propagation <- label.propagation.community(g)\n\nV(g)$community.greedy <- communities.greedy$membership\nV(g)$community.leading <- communities.leading$membership\nV(g)$community.label.propagation<- communities.label.propagation$membership\n\n#add colour for the community labels\n\nV(g)$colors.community.greedy <- communityToColors(\n  communities.greedy$membership,\n  length(communities.greedy))\n\nV(g)$colors.community.leading <- communityToColors(\n  communities.leading$membership,\n  length(communities.leading))\n\nV(g)$colors.community.label.propagation <- communityToColors(\n  communities.label.propagation$membership,\n  length(communities.label.propagation))\n\n#work out which edges are intra community\nE(g)$community.greedy <- getCommunityEdge(g, V(g)$community.greedy)\nE(g)$community.leading <- getCommunityEdge(g, V(g)$community.leading)\nE(g)$community.label.propagation <- getCommunityEdge(g, V(g)$community.label.propagation)\n\n#color the edges by community\nE(g)$colors.community.greedy <- communityToColors(array(E(g)$community.greedy), length(communities.greedy))\nE(g)$colors.community.leading <- communityToColors(array(E(g)$community.leading), length(communities.leading))\nE(g)$colors.community.label.propagation <- communityToColors(array(E(g)$community.label.propagation), length(communities.label.propagation))\n\n\n#send it to cytoscape\ng.NEL<-igraph.to.graphNEL(g)\n\n#too many attributes to do one by one!\nsummary(g)\n\n#wrote util functions to deal with it\ng.NEL<-processEdgeAttributes(g,g.NEL)\ng.NEL<-processNodeAttributes(g,g.NEL)\n\n\n#send graph to cytoscape\ng.Cyto<-CytoscapeWindow(title = \"example\",graph = g.NEL,overwriteWindow = T)\ndisplayGraph(g.Cyto)\n\n#Doesn't see to work and very slow node operations!\n\n#set the background\nsetDefaultBackgroundColor(g.Cyto,\"black\")\n\n#set edge width\nsetEdgeLineWidthDirect(g.Cyto,edges,new.value = 2)\n\n#set color of nodes\nsetNodeColorDirect(g.Cyto,V(g)$name,V(g)$colors.community.greedy)\nsetEdgeColorDirect(g.Cyto,edges,E(g)$colors.community.greedy)\n\nsetEdgeOpacityRule(g.Cyto,edge.attribute.name =community)\n\n#set Border width\nsetNodeBorderWidthDirect(g.Cyto,V(g)$name,new.sizes = rep(0,vcount(g)))\n\n\n###PLAN B #####\n\n#Seems far to slow for a large network, let's try a more direct approach\n\n# Convert igraph object into Cytoscape.js JSON\ncyjs <- toCytoscape(g)\n\n# POST it to Cytoscape\nnetwork.url = paste(base.url, \"networks\", sep=\"/\")\nres <- POST(url=network.url, body=cyjs, encode=\"json\")\n\n# Extract network SUID from the return value\nnetwork.suid = unname(fromJSON(rawToChar(res$content)))\n\n# Generate Visual Styles\nstyle.greedy <- buildStyle(\"greedy\", g, colors = \"colors.community.greedy\", community=\"community.greedy\")\nstyle.leading <- buildStyle(\"leading\", g, colors = \"colors.community.leading\", community=\"community.leading\")\nstyle.label.propagation <- buildStyle(\"label.propagation\", g,\n                                      colors = \"colors.community.label.propagation\", community=\"community.label.propagation\")\n\nstyle.url = paste(base.url, \"styles\", sep=\"/\")\nPOST(url=style.url, body=style.greedy, encode = \"json\")\nPOST(url=style.url, body=style.leading, encode = \"json\")\nPOST(url=style.url, body=style.label.propagation, encode = \"json\")\n\n# Apply a Style\napply.style.url = paste(base.url, \"apply/styles/greedy\", toString(network.suid), sep=\"/\")\nGET(apply.style.url)\n\n# Tweak Layout parameters\nlayout.params = list(\n  name=\"unweighted\",\n  value=TRUE\n)\n\nlayout.params.url = paste(base.url, \"apply/layouts/kamada-kawai/parameters\", sep=\"/\")\nPUT(layout.params.url, body=toJSON(list(layout.params)), encode = \"json\")\n\n# Apply layout\nparams <- paste(toString(network.suid), \"?column=community.greedy\", sep=\"\")\napply.layout.url = paste(base.url, \"apply/layouts/kamada-kawai\", params, sep=\"/\")\nGET(apply.layout.url)\n\n# Perform Edge Bundling\napply.bundling.url = paste(base.url, \"apply/edgebundling\", toString(network.suid), sep=\"/\")\nGET(apply.bundling.url)\n\n# Toggle graphics details\nlod.url = paste(base.url, \"ui/lod\", sep=\"/\")\nPUT(lod.url)\n\n\n\n#could go on to look at Gene ontology enrichement of clusters, TF binding to promoters of proteins,  -> biological significance of modules\n#Interactions between modules?\n\n#Meaningful visualisation on a large network is hard. More common to see smaller sub-networks of interest to study in detail.\n\n\n\n\n\n\n\n\n\n",
    "created" : 1447674796326.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2257665055",
    "id" : "71B77818",
    "lastKnownWriteTime" : 1447755326,
    "path" : "~/PhD/test/RGroup_Network/RGroup_Network.R",
    "project_path" : "RGroup_Network.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}